* Introduction
=MyDoom= is a famous virus from early 2004 that is, to this day, the
fastest spreading email worm ever. It is considered the most
devastating virus to date, causing in excess of 38 billion in damages.

Today viruses are ever evolving and becoming more and more obfuscated,
which is why we chose to analyze an early malware sample for this
demonstration.

The malware opens a backdoor on the victim's computer that allows
remote code execution, executes a time synchronized DDoS attack, and
then spreads itself via email and P2P filesharing apps.
* Static Analysis
** Data
*** Unpacking
[[./doom-peid.png]]

Initially opening the malware in PEiD, it appears to be packed with
UPX.

[[./doom-unpacked.png]]

After unpacking with the UPX tool, we can see the original sections.
*** Imports
[[./doom-imports.png]]

The malware contains various imports related to:
- Modifying the Registry
- Reading/Writing files
- Managing Threads and Synchronization
- Mutexes
- DLL Loading
- String Handling
- Socket Programming
*** Strings
[[./doom-strings.png]]

Looking at the strings, there seems to be many regular strings such as
people's names, imports, and names, but also a few strings with all
alphabetic characters and numbers. This points to some sort of
encoding scheme used for the rest of the garbled strings, especially
for the ones that look like paths, which could give a hint to where
the virus modifies registry keys or files.

[[./doom-strings-xref.png]]

Looking in the =.text= section, both of these "charsets" are used in a
single subroutine. Searching for XREFs to this function, we find a
single one which looks like the following.

[[./doom-strings-main-before.png]]

It seems to call the previous function in a loop. Searching for
XREFs to /this/ function, we know we've found the decoding
function.

[[./doom-strings-main-xref.png]]

[[./doom-strings-main-xref-ex.png]]

After analyzing both functions, it is pretty clear that this is a
rot13 decoding function.

[[./doom-strings-main-after.png]]

[[./doom-strings-xref-after.png]]

We created a quick tool to do rot13 decoding, and dumped all the
strings into it to see what I could find.

[[./doom-rot13.png]]

We can immediately see lots of previously garbled file names, registry
paths, and more are now clear. In specific,
=strip-girl-2.0bdcom_patches= was the name of the sample file. We can
also see a reference to Kazaa, an early P2P file sharing application,
which along with some filenames that sound like warez.
*** Arrays
Searching for xrefs to these strings, we find several large arrays in
the =.text= segment that contain these encoded strings, all of which
have been have named accordingly or guessed what they are.

[[./doom-arrays-emails.png]]

[[./doom-arrays-names.png]]

[[./doom-arrays-malware.png]]

[[./doom-arrays-domains.png]]
** Control Flow
*** Entry Point
After back-referencing some of the various functions, we found
ourselves in the middle of a bunch of random code creating and
sleeping threads all over the place. We decided to just take it from
the top and trace the execution starting at the entry point.

The malware starts out by initializing the WinSock DLL and copying two
dates into a large stack variable that is then passed to the rest of
the code.

[[./doom-trace-start.png]]

[[./doom-trace-start-dwords.png]]

Converting the =7D4h= to decimal we get =2004=, which tips us off that
we are working with dates. The mysterious constants turn out to be
instances of a =struct SYSTEMTIME=, which formatted, are:

- 02:28:39 UTC on 12 February 2004
- 16:09:18 UTC on 01 February 2004 

We will see later in the code where these dates are used.
*** Main Function
The main logic of the malware starts after the dates are copied into
the buffer.

The malware firsts checks for the existence of 2 registry keys,
creating them if they are not present.

If the registry keys exist, the malware tries to create a mutex. This
prevents duplicate versions of the malware from conflicting.

[[./doom-trace-main-mutex.png]]

After this, the malware checks the current time against a hard coded
date in the =.text= section, quitting if it is past, thus stopping the
spread of the malware on February 12th, 2004 at precisely 02:28:39
UTC.

After this check, the malware proceeds with the rest of its malicious
actions.
** Malicious Functionality
*** DoS Attack
Looking at the XREFs for the string that contains an HTTP GET header
to www.sco.com, we find a function that appears to execute a denial of
service attack by repeatedly opening sockets and sending a GET
request.

 [[./doom-ddos-req.png]]

The function creates 64 threads that repeatedly send HTTP requests to
the target site as an attempt to take it down.

[[./doom-ddos-init.png]]

Before executing the attack, the malware again checks the current time
against another hard coded date in the =.text= section, only executing
the attack if it is past February 1st, 2004 at precisely 16:09:18 UTC.

[[./doom-ddos-date.png]]
*** Replication
**** Kazaa

Looking at the code XREFs to the strings related to malicious
filenames and registry paths, we find a function that seems to create
a malicious file.

The function reads the Kazaa shared directory from the registry, which
makes contained files available to other users on the P2P file sharing
platform.

[[./doom-dropper-0.png]]

The function adds =\\= and a random filename from the previously
discovered list to the path,

[[./doom-dropper-1.png]]

adds an extension, and copies the input file to the shared directory.

[[./doom-dropper-2.png]]

This function has a single XREF, where it is called with the module's
own filepath.

[[./doom-dropper-self.png]]

From this, we can deduce that one of the ways that the malware spreads
is by sharing itself via Kazaa as fake warez.
**** Email

By looking at the code XREFs to email related strings in the =.text=
section, it is clear that this malware spreads itself by sending
malicious emails via SMTP.

Due to the size, complexity, and since we already had a good idea of
the purpose of this code, fully reversing the mail based spreading
functionality was outside the scope of our initial analysis.
* Mitigation
** Detection
*** Mutex
The virus creates a mutex named ="SwebSipcSmtxS0"=.
*** Registry Keys
The virus creates registry keys in:

- =HKLM\Software\Microsoft\Windows\CurrentVersion\Run=: ="TaskMon"=
- =HKCU\Software\Microsoft\Windows\CurrentVersion\Run=: ="TaskMon"=
- =HKLM\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\Version=
- =HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\ComDlg32\Version=
*** Files
The virus creates malicious files in:

- =C:\Windows\System32\taskmon.exe=
- =C:\Windows\System32\shimgapi.dll=
- Kazaa shared directory
*** Signature Scanning
The malware is not self modifying or randomizing; the code is the same
for each variant that is spread by any means.

All an antivirus would need to do to prevent the virus from ever
running is to find a combination of instructions and/or data in the
executable that uniquely identify it, which in this case would be very
simple.
** Recovery
In order to completely clean an infected computer after being
compromised, each registry key, file, and running process needs to be
killed and deleted.
