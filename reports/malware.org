* Report
** Introduction
** Reverse Engineering
** Intrusion Detection
** Intrusion Recovery
* Analysis
** Unpacking
[[./doom-peid.png]]

Initially opening the malware in PEiD, it appears to be packed with
UPX.

[[./doom-unpacked.png]]

After unpacking with the UPX tool, we can see the original sections.
** Imports
[[./doom-imports.png]]

The malware contains various imports related to:
- Modifying the Registry
- Reading/Writing files
- Managing Threads and Synchronization
- Mutexes
- DLL Loading
- String Handling
- Socket Programming
** Strings
[[./doom-strings.png]]

Looking at the strings, there seems to be many regular strings such as
people's names, imports, and names, but also a few strings with all
alphabetic characters and numbers. This points to some sort of
encoding scheme used for the rest of the garbled strings, especially
for the ones that look like paths, which could give a hint to where
the virus modifies registry keys or files.

[[./doom-strings-xref.png]]

Looking in the =.text= section, both of these "charsets" are used in a
single subroutine. Searching for cross-references to this function, we
find a single one which looks like the following.

[[./doom-strings-main-before.png]]

It seems to call the previous function in a loop. Searching for
cross-references to /this/ function, we know we've found the decoding
function.

[[./doom-strings-main-xref.png]]

[[./doom-strings-main-xref-ex.png]]

After analyzing both functions, it is pretty clear that this is a
rot13 decoding function.

[[./doom-strings-main-after.png]]

[[./doom-strings-xref-after.png]]

I created a quick tool to do rot13 decoding, and dumped all the
strings into it to see what I could find.

[[./doom-rot13.png]]

We can immediately see lots of previously garbled file names, registry
paths, and more are now clear. In specific,
=strip-girl-2.0bdcom_patches= was the name of the sample file. We can
also see a reference to Kazaa, an early P2P file sharing application,
which along with all the filenames that sound like warez, is probably
how the virus spreads itself.
** Arrays
Searching for xrefs to these strings, we find several large arrays in
the =.text= segment that contain these encoded strings, all of which I
have named accordingly or guessed what they are.

[[./doom-arrays-emails.png]]

[[./doom-arrays-names.png]]

[[./doom-arrays-malware.png]]

[[./doom-arrays-domains.png]]
** Replication
*** Kazaa
I was immediately interseted in reversing the function related to the
malicious filenames and registry paths, and after viewing the XREFS I
found a function that uses both of these. It seemed to read some
registry keys, mess with a string, and write a file, which seemed like
a prime candidate for answering questions about this malware's
purpose.

I can see that the function reads the Kazaa shared directory from the
registry,

[[./doom-dropper-0.png]]

Adds =\\= and a random malware name to the path,

[[./doom-dropper-1.png]]

Adds an extension, and copies the input file to the newly created
path.

[[./doom-dropper-2.png]]

I found a single XREF to this function, which calls drop_file with the
module's own filepath.

[[./doom-dropper-self.png]]

From this, I can deduce that one of the ways that the malware spreads
is by sharing itself via Kazaa as fake warez.
** Control Flow
After reversing the file dropping mechanism, I scanned the XREFs to
see where it was called, which left me in the middle of a bunch of
random code creating and sleeping threads all over the place. I
decided to just take it from the top and trace the execution starting
at the entry point.

The malware starts out by initializing the WinSock DLL and copying two
sequences of four dwords into a stack variable. Just by inspection,
I'm not sure exactly what they do or represent yet.

[[./doom-trace-start.png]]

[[./doom-trace-start-dwords.png]]
