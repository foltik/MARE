* Notes
** [2020-01-27 Mon]
Course help email: [[mailto:mare2020ece@gmail.com][mare2020ece@gmail.com]]
Course website: [[http://rci.rutgers.edu/~sa1087]]
* Homework
** HW1
[[https://docs.google.com/document/d/1aNu32_XUJ-QjYssRXdDGC0mFVrMKvvZ5pdPrUU9PejU/edit][Questions]]

*** Lab 1-1
**** Question 1
Yes, 40/71 antiviruses report the executable as a virus, and 32/69
report the DLL as a virus.
**** Question 2
The Time Date Stamp in =IMAGE_FILE_HEADER= reports compile times of
=2010/12/19 Sun 16:16:19 UTC=, and =2010/12/19 Sun 16:16:38 UTC= for
the executable and DLL respectively.
**** Question 3
No, but dependency walker reports only two DLL imports for the
executable, which likely it loads the other DLL in the folder with it.
Neither appear to be packed.
**** Question 4
The executable appears to import various functions related to reading,
writing, and copying files.

[[./lab1-1-imports.png]]

The DLL appears to import functions related to creating mutexes and
processes, and sending/receiving messages over network sockets.

 [[./lab1-1-dll-imports.png]]
**** Question 5
We could also check for any static strings in both files, which could
tip us off on what specific things each file does.

The executable contains a reference to the file name of the DLL file,
along with ="WARNING_THIS_WILL_DESTROY_YOUR_MACHINE"= , and a
suspicious string ="C:\windows\system32\kerne132.dll"=, which is
extremely similar to the system DLL kernel32.dll.

[[./lab1-1-exe-strings.png]]

The DLL has strings of an IP address, and a few strings that sound
like messages sent to that IP: ="execute"= , ="hello"= , and ="sleep"=.

[[./lab1-1-dll-strings.png]]
**** Question 6
We could use wireshark to capture inbound or outbound network traffic,
checking specifically for the IP address we saw in the strings.
**** Question 7
I would guess that the executable drops the DLL into
=C:\windows\system32\kerne132.dll= and then executes it.

From host based indicators I thought it might open a socket, connect
to an IP, and send some sort of hello.

[[./lab1-1-disas.png]]

After static analysis, it looks like it receives executable files and
will spawn processes with code sent over the network by the server.
*** Lab 1-2
**** Question 1
Yes, 39/63 antiviruses report it as a virus.
**** Question 2
Using PEiD, the executable is reported as "Nothing Found*", but the
executable has no normal =.text= or any other sections, just =UPX0=,
=UPX1=, =UPX2=, which makes me think it is packed with =UPX=.

[[./lab1-2-peid.png]]

After downloading and using the UPX tool on the file, we can see that
it was successfully unpacked and we can see the real sections again.

[[./lab1-2-unpack.png]]
**** Question 3
It appears to import various functions related to opening internet
URLs, mutexes, and creating services. This tells us that this malware
probably downloads a malicious file from the internet and creates a
persistent service that runs it.

[[./lab1-2-imports.png]]
**** Question 4
We could check the system services for the infected service that the
malware creates, or determine the sites that the malware makes network
requests to by further analysis, and monitor traffic to these sites.
*** Lab 1-3
**** Question 1
Yes, 61/71 antiviruses report it as a virus.
**** Question 2
Using PEiD, the executable is reported as being packed with FSG 1.0.

[[./lab1-3-peid.png]]

After using OllyDBG to find the original entry point, I was able to
dump the packed executable and reconstruct the imports table with
OllyDump.

[[./lab1-3-dbg.png]]

[[./lab1-3-unpacked.png]]

Looking at the disassembly, we can see a call to =CoCreateInstance=,
which creates an instance of a COM object.

[[./lab1-3-cocreate.png]]

We can determine which COM object it is instantiating via the =riid=
parameter, which after looking at it in the data segment, appears to
be =D30C1661-CDAF-11D0-A83E-00C04FC9E26E=.

[[./lab1-3-riid.png]]

Searching the registry for this value, we find that the COM object is
=IWebBrowser2=.

[[./lab1-3-reg.png]]

We can then add a structure that contains the vtable for this COM
object to see what methods the malware calls:

[[./lab1-3-struct.png]]

Now we can update the offset to =edx= to be an offset into this
struct, and we can see that the malware calls the =Navigate= function,
which opens a web browser to the passed URL.

[[./lab1-3-resolve.png]]
**** Question 3
It appears to import functions related to manipulating COM objects, so
it likely calls out to some other COM api.
**** Question 4
While the malware doesn't appear to do much, we could use Wireshark or
other network monitoring tools to watch for internet traffic to the
URL we found.
*** Lab 1-4
**** Question 1
Yes, 55/68 antiviruses report it as a virus.
**** Question 2
Using PEiD, the executable doesn't appear to be packed.

[[./lab1-4-peid.png]]
**** Question 3
The Time Date Stamp in =IMAGE_FILE_HEADER= reports a compile time of
=2019/08/30 Fri 22:26:59 UTC=.
**** Question 4
It appears to import various functions related to reading attached
resources, loading libraries, creating thread in remote processes, and
writing files.

These routines seem typical of a malware that injects code into
another process.

[[./lab1-4-imports.png]]
**** Question 5
We could use Wireshark or other network monitoring tools to watch for
internet traffic, checking specifically for the URL present in the
strings of the attached resources.
**** Question 6
Using Resource Hacker, we can see the file contains one resource which
is also an executable (the data starts with the two bytes =MZ=).

[[./lab1-4-resource.png]]

Looking at the imports and strings, this appears to be the part of the
malware that downloads and executes a file from the internet.

[[./lab1-4-resource-imports.png]]

[[./lab1-4-resource-strings.png]]
** HW2
[[https://docs.google.com/document/d/1WhfSneHJmc50FxaL85B-_XoYceXu70la25Y7vEWHawg/edit][Questions]]
*** Lab 3-1
**** Question 1
It contains only 1 import, =ExitProcess=, from =Kernel32.dll=, so it
is clearly packed.

The strings contain various suspicious terms, such as something about
making an HTTP request, autostart registry entries, a website, and
various executable names that appear malicious.

[[./lab3-1-strings1.png]]
[[./lab3-1-strings2.png]]

After running it, we can see the full list of DLLs it imports, which
has lots of stuff about networking, services, and registry editing:

[[./lab3-1-dlls.png]]
**** Question 2
Using Process Monitor, we can see that the malware reads its own image
just before creating a new file called =vmx32to64.exe= and adding a
registry key in =Windows\CurrentVersion\Run\VideoDriver= to start it
on login. =vmx32to64.exe= has the exact same size as the malware
executable, and after hashing each file and getting the same result,
we can confirm it copied itself to run at startup.

[[./lab3-1-drop.png]]
**** Question 3
When we ran Process Monitor before, in addition to the malware
dropping itself, it made some TCP requests. Using Process Monitor,

[[./lab3-1-tcp.png]]

After pinging the IP it connected to, we can confirm that it is
connecting to =www.practicalmalwareanalysis.com=. After redirecting the
DNS to a local netcat server, we can see what appears to be random
data sent over port 443 at each invocation of the malware.
*** Lab 3-2
**** Question 1
The DLL exports a function called ="Install"=, which we can probably
run to get it to install itself.

[[./lab3-2-exports.png]]
